// <auto-generated />
using coderush.Data;
using coderush.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace coderush.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200326101552_AddInitialClasses")]
    partial class AddInitialClasses
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("coderush.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool?>("IsActive");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("coderush.Models.ByWayBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ByWayBills");
                });

            modelBuilder.Entity("coderush.Models.CourierDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CourierDescriptions");
                });

            modelBuilder.Entity("coderush.Models.CourierDestination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CourierDestinations");
                });

            modelBuilder.Entity("coderush.Models.CourierRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourierDescriptionId");

                    b.Property<int>("CourierDestinationId");

                    b.Property<string>("CourierFM")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<int?>("CourierNumber");

                    b.Property<int>("CourierSendTypeId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JopPerson");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Quantity");

                    b.Property<string>("ReciverContactPerson")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ReciverName")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("UserId");

                    b.Property<string>("VesselsName");

                    b.HasKey("Id");

                    b.HasIndex("CourierDescriptionId");

                    b.HasIndex("CourierDestinationId");

                    b.HasIndex("CourierSendTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CourierRequests");
                });

            modelBuilder.Entity("coderush.Models.CourierRequestWayBill", b =>
                {
                    b.Property<int>("WayBillId");

                    b.Property<int>("CourierRequestId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDeleted");

                    b.HasKey("WayBillId", "CourierRequestId");

                    b.HasIndex("CourierRequestId");

                    b.ToTable("CourierRequestWayBills");
                });

            modelBuilder.Entity("coderush.Models.CourierSendType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("CourierSendTypes");
                });

            modelBuilder.Entity("coderush.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CourierDestinationId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<string>("From");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsFullyDeliverd");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("To");

                    b.Property<string>("UserId");

                    b.Property<int>("WayBillId");

                    b.HasKey("Id");

                    b.HasIndex("CourierDestinationId");

                    b.HasIndex("UserId");

                    b.HasIndex("WayBillId");

                    b.ToTable("Deliverys");
                });

            modelBuilder.Entity("coderush.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CourierRequestId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<int?>("DeliveryId");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Type");

                    b.Property<int?>("WayBillId");

                    b.HasKey("Id");

                    b.HasIndex("CourierRequestId");

                    b.HasIndex("DeliveryId");

                    b.HasIndex("WayBillId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("coderush.Models.NumberSequence", b =>
                {
                    b.Property<int>("NumberSequenceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LastNumber");

                    b.Property<string>("Module")
                        .IsRequired();

                    b.Property<string>("NumberSequenceName")
                        .IsRequired();

                    b.Property<string>("Prefix")
                        .IsRequired();

                    b.HasKey("NumberSequenceId");

                    b.ToTable("NumberSequence");
                });

            modelBuilder.Entity("coderush.Models.UserNotification", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<int>("NotificationId");

                    b.Property<bool>("IsRead");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("NotificationId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("coderush.Models.UserProfile", b =>
                {
                    b.Property<int>("UserProfileId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserId");

                    b.Property<string>("ConfirmPassword");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName");

                    b.Property<string>("OldPassword");

                    b.Property<string>("Password");

                    b.Property<string>("ProfilePicture");

                    b.HasKey("UserProfileId");

                    b.ToTable("UserProfile");
                });

            modelBuilder.Entity("coderush.Models.WayBill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ByWayBillId");

                    b.Property<int>("CourierDestinationId");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DeletedBy");

                    b.Property<DateTime?>("DeletedDate");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsFully");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UserId");

                    b.Property<int>("WaybillNumber");

                    b.HasKey("Id");

                    b.HasIndex("ByWayBillId");

                    b.HasIndex("CourierDestinationId");

                    b.HasIndex("UserId");

                    b.ToTable("WayBills");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("coderush.Models.CourierRequest", b =>
                {
                    b.HasOne("coderush.Models.CourierDescription", "CourierDescription")
                        .WithMany("CourierRequests")
                        .HasForeignKey("CourierDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.CourierDestination", "CourierDestination")
                        .WithMany("CourierRequests")
                        .HasForeignKey("CourierDestinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.CourierSendType", "CourierSendType")
                        .WithMany("CourierRequests")
                        .HasForeignKey("CourierSendTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("coderush.Models.CourierRequestWayBill", b =>
                {
                    b.HasOne("coderush.Models.CourierRequest", "CourierRequest")
                        .WithMany("WayBill")
                        .HasForeignKey("CourierRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.WayBill", "WayBill")
                        .WithMany("CourierRequest")
                        .HasForeignKey("WayBillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("coderush.Models.Delivery", b =>
                {
                    b.HasOne("coderush.Models.CourierDestination", "CourierDestination")
                        .WithMany()
                        .HasForeignKey("CourierDestinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("coderush.Models.WayBill", "WayBill")
                        .WithMany()
                        .HasForeignKey("WayBillId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("coderush.Models.Notification", b =>
                {
                    b.HasOne("coderush.Models.CourierRequest", "CourierRequest")
                        .WithMany()
                        .HasForeignKey("CourierRequestId");

                    b.HasOne("coderush.Models.Delivery", "Delivery")
                        .WithMany()
                        .HasForeignKey("DeliveryId");

                    b.HasOne("coderush.Models.WayBill", "WayBill")
                        .WithMany()
                        .HasForeignKey("WayBillId");
                });

            modelBuilder.Entity("coderush.Models.UserNotification", b =>
                {
                    b.HasOne("coderush.Models.Notification", "Notification")
                        .WithMany()
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("coderush.Models.WayBill", b =>
                {
                    b.HasOne("coderush.Models.ByWayBill", "ByWayBill")
                        .WithMany("CourierRequests")
                        .HasForeignKey("ByWayBillId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.CourierDestination", "CourierDestination")
                        .WithMany()
                        .HasForeignKey("CourierDestinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("coderush.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("coderush.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coderush.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("coderush.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
